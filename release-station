#!/usr/bin/python

EXTRA_MODULES="/usr/share/pharos-release-station/modules"
LOGGER_NAME="pharos-release-station"
UI_FILE="/usr/share/pharos-release-station/release-station.ui"
CONFIG_FILE="/etc/pharos-release-station/config.ini"
CONFIG_DEFAULTS = { "edi_use_ssl": "true",
                    "logo_image_file": "/usr/share/pharos-release-station/logo.png",
                    "idcard_image_file": "/usr/share/pharos-release-station/id-card.jpg",
                  }


from gi.repository import GObject, GLib, Gtk, Gdk, GdkPixbuf

from optparse import OptionParser

import ConfigParser, io

import sys, os.path, time, traceback
import logging
import threading

# Local modules as separate packages
import omega, magtek

sys.path.append(EXTRA_MODULES)
# Modules kept separate but shipped with this
import auth_krb5

logger = logging.getLogger(LOGGER_NAME)

class ReleaseStation:
    def __init__(self, options, config, quitFunction):
        """Constructor

        options -- dictionary of values from OptionParser
        config -- ConfigParser configuration
        quitFunction -- something callable (i.e. GLib.MainLoop().quit or Gtk.main_quit)
        """
        self.builder = Gtk.Builder()
        self.config = config
        self.quitFunction = quitFunction
        self.threads = []
        try: 
            self.builder.add_from_file(options.ui_file)
            logger.debug("Builder UI loaded")
        except GLib.GError, e:
            print >> sys.stderr, "FATAL: Unable to load UI: ", e
            sys.exit(-1)
        
        # Gtk signal handlers
        handlers = {
            "kpEvent": self.cbKeyPress,
            "cb_login": self.cbLogin, 
            "cb_toggle_tabs": self.cbToggleTabs, 
            "cb_user_activate": self.cbUserActivate,
            "cb_exit": self.cbExit,
            "cb_exit_app": self.cbExitApp,
            "cb_swipe": self.cbSwipe,
            "cb_print": self.cbPrint,
            "cb_printall": self.cbPrintAll,
            "cb_delete": self.cbDelete
        }
        self.winMain = self.builder.get_object("winMain")
        self.winMain.resize(640,480)
        self.winMain.set_position(Gtk.WindowPosition.CENTER)
        self.builder.get_object("nbMain").set_current_page(0)
        self.builder.get_object("imgLogo")
        try:
            pixbuf = GdkPixbuf.Pixbuf.new_from_file(config.get('ReleaseStation', 'logo_image_file'))
        except GLib.GError as e:
            
            self._errDialog("Failed to load image file %s" % config.get('ReleaseStation', 'logo_image_file'), False)
            pixbuf = GdkPixbuf.Pixbuf.new(GdkPixbuf.Colorspace.RGB, False, 8, 10, 10)
        self.builder.get_object("imgLogo").set_from_pixbuf(pixbuf)
        try:
            pixbuf = GdkPixbuf.Pixbuf.new_from_file(config.get('ReleaseStation', 'idcard_image_file'))
        except GLib.GError as e:
            pixbuf = GdkPixbuf.Pixbuf.new(GdkPixbuf.Colorspace.RGB, False, 8, 10, 10)
        self.builder.get_object("imgCard").set_from_pixbuf(pixbuf)
        self.winMain.show_all()
        logger.debug("Main screen turn on!")
        self.builder.connect_signals(handlers)
        logger.debug("We get signal!")
        # Because we don't have a window manager
        Gdk.Window.focus(self.winMain.get_window(), Gdk.CURRENT_TIME)
        # GNOME 3 turns off button images by default.  Turn it on
        self.gtkSettings = Gtk.Settings.get_default()
        self.gtkSettings.set_property('gtk-button-images', True)

        self.magtek = None
        try:
            self.magtek = magtek.MagTek()
        except magtek.MagTekException as e:
            if e.type != magtek.MagTekException.NO_READER:
                logger.warn("Error while initializing MagTek module: %s", e.message)

        # Omega connection
        try:
            self.omega = omega.Omega(config.get('ReleaseStation', 'edi_server'), 
                                     config.getboolean('ReleaseStation', 'edi_use_ssl'))
            self.omega.start_session(config.get('ReleaseStation', 'omega_name'),
                                     config.get('ReleaseStation', 'site_password'))
        except omega.OmegaException as e:
            self._errDialog("An error occurred while starting up: %s" % e.message, False)
            sys.exit(1)
        self.jobListStore = self.builder.get_object("jobList")
        self.jobListStore.clear()
        if self.magtek is None or self.magtek.getInterfaceType() != magtek.MagTek.INTERFACE_TYPE_HID:
            if self.magtek is None:
                self._errDialog("Card reader not found.  Card swiping disabled.", False)
            else:
                self._errDialog("Card reader present, but not in HID mode.  Card swiping disabled.", False)
            self.builder.get_object("btnSwipe").set_sensitive(False)
            self.builder.get_object("btnSwipe").set_label("(card reader unavailable)")
        self.builder.get_object("treeviewPrintJobs").get_selection().connect("changed", self._selectionChanged)

    def _ensureConnection(self):
        try:
            if not self.omega.connected():
                logger.debug("Starting new session...")
                self.omega.start_session(config.get('ReleaseStation', 'omega_name'), config.get('ReleaseStation', 'site_password'))
                logger.info("Started new session.")
        except omega.OmegaException as e:
            self._errDialog("An error occurred while reconnecting to Pharos: %s" % e.message, False)
            sys.exit(1)

    def cbKeyPress(self, widget, event):
#        logger.debug("Keypress event received by %s", widget)
        if widget is self.builder.get_object("winMain"):
            if event.keyval == Gdk.KEY_F12:
                logger.warn("Enabling admin mode")
                self.builder.get_object("adminBox").set_visible(True)
        elif event.keyval == Gdk.KEY_Escape:
            self.builder.get_object("tfUsername").set_text('')
            self.builder.get_object("tfPassword").set_text('')
            self.builder.get_object("tfUsername").grab_focus()

    def cbExitApp(self, widget):
        for t in self.threads:
            if not isinstance(t, threading.Thread):
                logger.fatal("Thread %s is not a thread!", t)
            try:
                t.stop()
            except Exception as e:
                logger.fatal("Exception while terminating thread: %s", e)
        self.quitFunction()

    def cbToggleTabs(self, widget):
        nb = self.builder.get_object("nbMain")
        if nb.get_show_tabs():
            nb.set_show_tabs(False)
            widget.set_label("Show Tabs")
        else:
            nb.set_show_tabs(True)
            widget.set_label("Hide Tabs")

    def cbExit(self, widget):
        self.jobListStore.clear()
        self.builder.get_object("queueLbl").set_text("(please wait)")
        self.builder.get_object("queueLbl").set_visible(True)
        self.builder.get_object("treeviewWindow").set_visible(False)
        self.builder.get_object("lblWelcome").set_text("")
        # Unlock the user
        if self.username is not None:
            self.omega.unlockUser(self.username)
        self._toggleJobButtons(False)
        self.username = None
        self.builder.get_object("tfUsername").set_text("")
        self.builder.get_object("tfPassword").set_text("")
        self.builder.get_object("nbMain").set_current_page(0)
        self.builder.get_object("tfUsername").grab_focus()
        

    def _toggleJobButtons(self, state):
        for b in ('btnDelete', 'btnPrint'):
            self.builder.get_object(b).set_sensitive(state)

    def _selectionChanged(self, widget, user_data=None):
        if self._getSelectedJob() is not None:
            self._toggleJobButtons(True)

    def swipeCallback(self):
        logger.debug("swipeCallback")
        while Gtk.events_pending():
            logger.debug("Calling main_iteration()")
            Gtk.main_iteration()
        return not self._cancelSwipe

    def cancelSwipe(self, x, y):
        logger.debug("Swipe cancelled")
        # We don't really care about the response ID.  If the user somehow got rid of the dialog,
        # they didn't want to swipe their card...
        self._cancelSwipe = True

    def cbSwipe(self, widget):
        pass
        # self._cancelSwipe = False
        # dlg = Gtk.MessageDialog(self.winMain,
        #                         Gtk.DialogFlags.DESTROY_WITH_PARENT,
        #                         Gtk.MessageType.INFO,
        #                         Gtk.ButtonsType.CANCEL,
        #                         "Swipe your card now...")
        # dlg.connect("response", self.cancelSwipe)
        # red = Gdk.RGBA()
        # red.parse("#993333")
        # white = Gdk.RGBA()
        # white.parse("white")
        # dlg.override_background_color(0, red)
        # dlg.override_color(0, white)
        # dlg.show()
        # while Gtk.events_pending():
        #     Gtk.main_iteration()
        # swipeData = None
        # logger.debug("About to read card...")
        # try:
        #     swipeData = self.magtek.readCard(self.swipeCallback)
        # except:
        #     self._errDialog("Could not read your card.  Please try again.\n(Do not swipe card before clicking button.)", False)
        # dlg.destroy()
        # if swipeData is None:
        #     logger.debug("swipeData = None, user probably cancelled...")
        #     return
        # logger.debug("Got some card data...")
        # track2 = swipeData.getTrack(2)
        # logger.debug("Track 2 data: %s", track2)
        # if swipeData.getTrack(1) is not None and swipeData.getTrack(1).startswith("%B"):
        #     self._errDialog("Sorry, you can't pay for printing with a credit or debit card.\n\nBut thanks for the credit card number, it'll come in handy!\n\n(just kidding about that last part)", False)
        #     return
        # if track2 is None:
        #     self._errDialog("Couldn't read your card.  Please try again.\n\nIf your ID is old or your magnetic stripe is worn\nor damaged, you may need a replacement card.", False)
        #     return
        # if swipeData.getTrack(3) is None or swipeData.getTrack(1):
        #     if not self._askQuestion("That doesn't look like an MIT ID card.  Try to continue anyway?"):
        #         return

        # username = None
        # logger.debug("Looking up card...")
        # try:
        #     self._ensureConnection()
        #     username = self.omega.getUsernameFromCard(track2)
        # except omega.PharosEDIException as e:
        #     self._errDialog(e.message, False)
        #     return
        # if len(username) > 0:
        #     self.displayJobList(username)
        # else:
        #     self._errDialog("Error: ", False)
       

    def cbUserActivate(self, widget):
        # Move focus to password field if user hits "Enter"
        if len(widget.get_text()) > 0:
            self.builder.get_object("tfPassword").grab_focus()

    # TODO: locking?  Handle if locked on another terminal
    def cbLogin(self, widget):
        logger.debug("In login callback")
        uname = self.builder.get_object("tfUsername").get_text()
        password = self.builder.get_object("tfPassword").get_text()
        if len(uname) < 1 or len(password) < 1:
            return
        krbauth = auth_krb5.Authenticator('pharos-release-station')
        if krbauth.authenticate(uname, password):
            logger.debug("Got username: %s", uname)
            self._acceptSwipes = False
            if uname:
                self._ensureConnection()
                self.displayJobList(uname)
        else:
            self._errDialog("Error: %s" % krbauth.error, False)

    def _errDialog(self, message, verbose=True):
        msg = message
        dlg = Gtk.MessageDialog(self.winMain,
                                Gtk.DialogFlags.DESTROY_WITH_PARENT,
                                Gtk.MessageType.ERROR,
                                Gtk.ButtonsType.CLOSE,
                                message + ("\n\n(Please visit the TechCash office in W20-021\n or report this error to icp-help@mit.edu.)" if verbose else ""))
        dlg.set_title("Error")
        red = Gdk.RGBA()
        red.parse("#993333")
        white = Gdk.RGBA()
        white.parse("white")
        dlg.override_background_color(0, red)
        dlg.override_color(0, white)
        logger.debug("Running _errDialog")
        dlg.run()
        logger.debug("Done with _errDialog")
        dlg.destroy()
        logger.debug("Destroyed _errDialog")

    def _pulseBar(self):
        self.builder.get_object("queueProgress").pulse()
        while Gtk.events_pending():
            Gtk.main_iteration()

    def displayJobList(self, username):
        self.username = username
        self.builder.get_object("nbMain").set_current_page(1)
        self.builder.get_object("queueProgress").show()
        self._pulseBar()
        logger.debug("Calling getUserDetails")
        try:
            details = self.omega.getUserDetails(username)
        except omega.PharosEDIException as e:
            logger.error("getUserDetails threw exception: %s", e.message)
            self.builder.get_object("queueProgress").hide()
            # Ugh
            self._errDialog(e.message, not ("user is locked" in e.message))
            self.cbExit(None)
            return
        self.builder.get_object("lblWelcome").set_text("User: %s     Quota Balance: %d pages" % (username, int(details.balance * 10)))
        self._pulseBar()
        logger.debug("Calling getPrintJobsForUser")
        try:
            jobs = self.omega.getPrintJobsForUser(username, self._pulseBar)
        except omega.PharosEDIException as e:
            logger.error("getPrintJobsForUser threw exception: %s", e.message)
            self._errDialog("Error while retrieving print jobs: " + e.message)
            self.cbExit(None)
            return
        logger.debug("Found %d jobs", len(jobs))
        self.jobobjs = {}
        self.jobListStore.clear()
        if len(jobs) == 0:
            self.builder.get_object("queueLbl").set_text("No print jobs found.")
        if jobs:
            self.builder.get_object("queueLbl").set_visible(False)
            self.builder.get_object("treeviewWindow").set_visible(True)
            for j in jobs:
                self._pulseBar()
                Gtk.main_iteration_do(False)
                # TODO: Just store the object in the Liststore, but it needs to be a subclass of GObject
                self.jobobjs[j.job_id] = j
                self.jobListStore.append((j.job_id, j.username, j.formattedDate("%b %m %H:%M"), j.pages, j.jobname))
            # Select the first job, emulate the Omegas
            self.builder.get_object("treeviewPrintJobs").get_selection().select_iter(self.jobListStore.get_iter_first())
        self.builder.get_object("queueProgress").hide()

    def _getSelectedJob(self):
        tree = self.builder.get_object("treeviewPrintJobs")
        model, it = tree.get_selection().get_selected()
        if it != None:
            return model[it][0]
        else:
            return None

    def _askQuestion(self, questionTxt):
        dlg = Gtk.MessageDialog(self.winMain,
                                Gtk.DialogFlags.DESTROY_WITH_PARENT,
                                Gtk.MessageType.QUESTION,
                                Gtk.ButtonsType.YES_NO,
                                questionTxt)
        dlg.set_title("Question")
        response = dlg.run()
        dlg.destroy()
        return (response == Gtk.ResponseType.YES)

    def cbPrint(self, widget):
        job = self._getSelectedJob()
        self._releaseJob(job)
        self.displayJobList(self.username)

    def _releaseJob(self, jobid):
        if jobid is not None and jobid in self.jobobjs:
            try:
                self.omega.releaseJob(jobid, self.jobobjs[jobid].queue, self.jobobjs[jobid].username)
            except omega.PharosEDIException as e:
                self._errDialog("Error while releasing job:\n%s" % (e.message))


    def cbPrintAll(self, widget):
        if self._askQuestion("Are you sure you want to print all jobs?"):
            print >>sys.stderr, self.jobobjs
            for k in self.jobobjs:
                self._releaseJob(k)
        self.displayJobList(self.username)

    def cbDelete(self, widget):
        job = self._getSelectedJob()
        if job is not None:
            try:
                self.omega.deleteJob(job, self.jobobjs[job].queue)
            except omega.PharosEDIException(e):
                self._errDialog("Error while deleting job:\n%s" % (e.message))
        self.displayJobList(self.username)


    def swipeCallback2(self):
        logger.debug("swipeCallback2")
        while Gtk.events_pending():
            logger.debug("Calling main_iteration() 2")
            Gtk.main_iteration()
        return True

    def checkForSwipe(self, swipeData=None):
        track2 = swipeData.getTrack(2)
        logger.debug("Track 2: %s", track2)
        if swipeData.getTrack(1) is not None and swipeData.getTrack(1).startswith("%B"):
            self._errDialog("Sorry, you can't pay for printing with a credit or debit card.\n\nBut thanks for the credit card number, it'll come in handy!\n\n(just kidding about that last part)", False)
            return
        if track2 is None:
            self._errDialog("Couldn't read your card.  Please try again.\n\nIf your ID is old or your magnetic stripe is worn\nor damaged, you may need a replacement card.", False)
            return
        if swipeData.getTrack(3) is None or swipeData.getTrack(1):
            if not self._askQuestion("That doesn't look like an MIT ID card.  Try to continue anyway?"):
                return

        username = None
        logger.debug("Looking up card...")
        try:
            self._ensureConnection()
            username = self.omega.getUsernameFromCard(track2)
        except omega.PharosEDIException as e:
            self._errDialog(e.message, False)
        if len(username) > 0:
            self.displayJobList(username)
        else:
            self._errDialog("Error: ", False)

    def _excepthook(self, type, value, tb):
        if type is KeyboardInterrupt:
            return
        print >>sys.stderr, "Unhandled exception:\n%s\n" % ''.join(traceback.format_exception(type, value, tb))
        dlg = Gtk.MessageDialog(self.winMain,
                                Gtk.DialogFlags.DESTROY_WITH_PARENT,
                                Gtk.MessageType.ERROR,
                                Gtk.ButtonsType.CLOSE,
                                "An unhandled exception occurred.  Consult the logs for more details.\nThe program will now quit.\n")
        dlg.run()
        dlg.destroy()
        sys.exit(1)

class cardReaderThread(threading.Thread):
    stopEvent = threading.Event()

    def __init__(self, reader=None, consumerObj=None):
        super(cardReaderThread, self).__init__(None, None, 'CardReaderThread')
        self.consumerObj = consumerObj
        self.reader = reader
        self.logger = logging.getLogger(LOGGER_NAME).getChild("cardReaderThread")

    # A callback to stop the blocking loop in readCard
    def _readerCallback(self):
        self.logger.debug("_readerCallback")
        return not self.stopEvent.isSet()

    def run(self):
        self.logger.debug("Starting thread")
        while not self.stopEvent.isSet():
            swipeData = None
            try:
                self.logger.debug("Calling readCard...")
                swipeData = self.reader.readCard(True, self._readerCallback)
            except Exception as e:
                self.logger.warning("Exception while reading card data: %s", e)
            if swipeData is None:
                self.logger.debug("swipeData = None, user probably cancelled...")
            else:
                self.logger.debug("Got swipe data")
                if self.consumerObj is not None:
                    # Add an idle callback.  Doing this any other way will block the UI.
                    Gdk.threads_add_idle(GLib.PRIORITY_DEFAULT, self.consumerObj.checkForSwipe, swipeData)
                    self.logger.debug("idle thread callback added")
                else:
                    logger.warn("consumerObj is None, cannot notify")

    def stop(self):
        self.stopEvent.set()

if __name__ == '__main__':
    # Parse command line options
    parser = OptionParser()
    parser.set_defaults(debug=False)
    parser.add_option("--debug", action="store_true", dest="debug")
    parser.add_option("--ui", action="store", type="string",
                      default=UI_FILE, dest="ui_file")
    parser.add_option("--cfg", action="store", type="string",
                      default=CONFIG_FILE, dest="config_file")
    (options, args) = parser.parse_args()
    # Initialize logging
    logging.basicConfig(level=logging.ERROR)
    if options.debug:
        logger.setLevel(logging.DEBUG)
    # Parse config file
    if not os.path.isfile(options.config_file):
        print >>sys.stderr, "Config file %s not found" % options.config_file
        sys.exit(1)
    config = ConfigParser.RawConfigParser(CONFIG_DEFAULTS)
    config.readfp(io.BytesIO("[ReleaseStation]\n"))
    config.read(options.config_file)
    # This initializes threading support in the PyGObject bindings.  This is not
    # a GObject API call.
    GObject.threads_init()
    # Initialize Gdk.Gtk thread support
    Gdk.threads_init()
    Gtk.init(None)
    main_loop = GLib.MainLoop()
    try:
        alpha = ReleaseStation(options, config, main_loop.quit)
        cardReader = cardReaderThread(alpha.magtek, alpha)
        alpha.threads.append(cardReader)
        cardReader.start()
        sys.excepthook = alpha._excepthook
    except Exception as e:
        print >> sys.stderr, "Unexpected error while starting application", e.message
    try:
        main_loop.run()
    except KeyboardInterrupt:
        logger.debug("KeyboardInterrupt received, shutting down...")
        # TODO, don't quit
        cardReader.stop()
        logger.debug("Threads stopped.  Quitting main_loop")
        main_loop.quit()
    except Exception as e:
        print >> sys.stderr, "A fatal error occurred while running the main loop", e
        
